#!/usr/bin/python3

import json


class File(object):

    """abstract class of file"""

    def __init__(self, filepath):
        self.path = filepath
        self.file = open(self.path, "r")
        self.content = list(self.file)
        self.nbline = len(self.content)

    def readLine(self, nbline):
        """Reads a specific line

        Args:
            nbline (int): number of the line

        Returns:
            str: the content read
        """
        return self.content[nbline - 1]

    def closeFile(self):
        """close a file

        Returns:
            none: File has been closed
        """
        self.file.close()


class ConfigFile(File):

    """Deal with the configuration file in /home/pi/ds18b20_conf/config.json"""

    def __init__(self, filepath):
        super(ConfigFile, self).__init__(filepath)

    def readData(self):
        """load the data from a json file

        Returns:
            none: The datas have been loaded
        """
        self.file.seek(0)
        self.data = json.load(self.file)

    def getCredentials(self):
        """get the credential from the json loaded data

        Returns:
            str: email and password from the data
        """
        email = self.data["email"]
        password = self.data["password"]
        return email, password

    def has_alert(self):
        """determine if the configuration includes alert mailing

        Returns:
            bool: True if it has alert, False otherwise
        """
        if self.data["alert"]["choice"]:
            return True
        else:
            return False

    def getProbes(self):
        return int(self.data["number"])

    def getMaxTempAlert(self):
        """get the max temperature allowed before alert from the json loaded data

        Returns:
            float: maximum temperature allowed
        """
        return float(self.data["alert"]["max"])

    def getMinTempAlert(self):
        """Get the minimum temperature allowed before alert from the json loaded data

        Returns:
            float: Minimum temp allowed
        """
        return float(self.data["alert"]["min"])

    def register(self, settings):
        """Registers the (new) settings in the cofnig file

        Args:
            settings (dict): Dictionnary of the settings

        Returns:
            none: The settings hacve been saved in the config file
        """
        element = json.dumps(settings, indent=4)
        self._save(element)

    def _save(self, element):
        """Overwrite text in a file to ensure that the file have been saved

        Args:
            element (str): what needs to be written

        Returns:
            none: The file has been correctly overwrittent by the element
        """
        self.file = open(self.path, "w")
        self.file.write(element)
        self.file.close()
        self.file = open(self.path, "r")

    def closeFile(self):
        super(ConfigFile, self).closeFile()


class ProbeFile(File):

    """Deals with the file generated by the connected probes"""

    def __init__(self, filepath):
        super(ProbeFile, self).__init__(filepath)

    def closeFile(self):
        super(ProbeFile, self).closeFile()


class ModuleFile(File):

    """Deals with the file /etc/modules"""

    def __init__(self, filepath):
        super(ModuleFile, self).__init__(filepath)

    def closeFile(self):
        super(ModuleFile, self).closeFile()
